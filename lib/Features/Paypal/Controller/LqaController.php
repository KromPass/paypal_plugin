<?php

namespace Features\Paypal\Controller;

use AbstractControllers\IController;
use ActivityLog\Activity;
use ActivityLog\ActivityLogStruct;
use API\V2\Exceptions\NotFoundException;
use API\V2\Validators\ChunkReviewPasswordValidator;
use API\V2\Validators\JobPasswordValidator;
use API\V2\Validators\LoginValidator;
use BaseKleinViewController;
use Features\Paypal;
use Features\Paypal\Controller\API\Validators\TranslatorsWhitelistAccessValidator;
use Features\Paypal\Decorator\LqaDecorator;
use ILegacyCatController;
use INIT;
use Jobs_JobStruct;
use PHPTALWithAppend;
use Projects_ProjectStruct;
use Utils;

class LqaController extends BaseKleinViewController implements ILegacyCatController {

    /**
     * @var \PHPTALWithAppend ;
     */
    protected $view;

    /**
     * @var Jobs_JobStruct
     */
    protected $jobStruct;

    /**
     * @var Projects_ProjectStruct
     */
    protected $project;

    /**
     * @var JobPasswordValidator
     */
    protected $chunkValidator ;

    /**
     * @var LqaDecorator
     */
    protected $decorator ;

    /**
     * @param Projects_ProjectStruct $project
     */
    public function setProject( Projects_ProjectStruct $project ) {
        $this->project = $project;
    }

    /**
     * @return Projects_ProjectStruct
     */
    public function getProject() {
        return $this->project;
    }

    /**
     * @param Jobs_JobStruct $jobStruct
     */
    public function setJobStruct( Jobs_JobStruct $jobStruct ) {
        $this->jobStruct = $jobStruct;
    }

    public function afterConstruct() {
        $this->appendValidator( new LoginValidator( $this ) );

        $chunkValidator = new ChunkReviewPasswordValidator( $this );

        $Controller = $this;

        $chunkValidator->onSuccess( function() use( $chunkValidator, $Controller ){
            $Controller->setJobStruct( $chunkValidator->getChunk() );
            $Controller->setProject( $chunkValidator->getChunk()->getProject( 60 * 60 ) );
        } );

        $this->appendValidator( $chunkValidator );
        $this->appendValidator( new TranslatorsWhitelistAccessValidator( $this ) );

        $this->chunkValidator = $chunkValidator ;

    }

    public function setView( $template_name ) {
        $this->view = new PHPTALWithAppend( $template_name );
    }

    public function show() {

        $found = false ;

        if ( ! $this->chunkValidator->getChunk() ) {
            $this->setView( INIT::$TEMPLATE_ROOT . '/job_not_found.html' );
        } elseif ( $this->chunkValidator->getChunk()->isCanceled() ) {
            $this->setView( INIT::$TEMPLATE_ROOT . '/job_cancelled.html' );
        } elseif ($this->chunkValidator->getChunk()->isArchived() )
            $this->setView( INIT::$TEMPLATE_ROOT . '/job_archived.html' );
        else {
            $this->setView( Paypal::getPluginBasePath() . '/Features/Paypal/View/Html/lqa.html' );
            $found = true ;
        }

        $decorator = new LqaDecorator( $this, $this->view );
        $this->setDefaultTemplateData();

        $decorator->setReviewPassword( $this->params->password );
        $decorator->decorate();

        $this->decorator = $decorator ;

        if ( $found ) {
            $this->project->getFeatures()
                ->appendDecorators('CatDecorator', $this, $this->view );
        }

        $this->response->body( $this->view->execute() );
        $this->response->send();
    }

    protected function _saveActivity(){
        $action = ActivityLogStruct::ACCESS_REVISE_PAGE;

        $activity             = new ActivityLogStruct();
        $activity->id_job     = $this->chunkValidator->getChunk()->id;
        $activity->id_project = $this->project->id;
        $activity->action     = $action;
        $activity->ip         = Utils::getRealIpAddr();
        $activity->uid        = $this->getUser()->uid ;
        $activity->event_date = date( 'Y-m-d H:i:s' );
        Activity::save( $activity );
    }

    public function getChunkValidator() {
        return $this->chunkValidator ;
    }

    protected function validateRequest() {
        try {
            parent::validateRequest(); // TODO: Change the autogenerated stub
        } catch ( NotFoundException $e ) {
            // job not found, pass to controller method to set the appropriate HTML template
        }
    }

    public function getChunk() {
        return new \Chunks_ChunkStruct( $this->chunkValidator->getChunk()->toArray() );
    }

    public function getJobStats() {
        return $this->decorator->getJobStats() ;
    }

    public function isRevision() {
        return true ;
    }

}